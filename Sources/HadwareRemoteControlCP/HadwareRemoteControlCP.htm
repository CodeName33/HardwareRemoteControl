<!DOCTYPE html>
<html>
    <head>
        <title>HardwareRemoteControl</title>
        <meta charset="utf-8">
        <style>
            @font-face {
                font-family: "main";
                src: url(data:font/woff;base64,);
            }
            
            body, div, td, input, textarea, select {
                font-family: "main", sans;
                font-size: 12px;
            }
            body { 
                margin: 0;
                padding: 0;
                width: 100vw;
                height: 100vh;
                max-width: 100vw;
                max-height: 100vh;
                display: flex;
                flex-direction: column;
                background-color: #222E35;
                color: #eee;
            }
            .toolbar {
                display: flex;
                align-items: center;
                gap: 0.4em;
                padding: 0.4em;
            }
            .screen-area[type='stretch']  {
                flex-grow: 1;
                display: flex;
                align-items: center;
                justify-content: center;
                overflow-y: auto;
            }
            .screen-area[type='stretch'] .screen {
                border: solid 2px #33444E;
                align-self: center;
                max-width: calc(100vw - 2em);
                height: fit-content;
                max-height: calc(100vh - 3em);
            }

            .screen-area[type='scroll']  {
                flex-grow: 1;
                display: flex;
                align-items: center;
                justify-content: flex-start;
                overflow-y: auto;
            }
            .screen-area[type='scroll'] .screen {
                border: solid 2px #33444E;
                align-self: baseline;
                min-width: 1920px;
            }

            .hidden-v {
                /*
                max-width: 0px;
                max-height: 0px;
                width: 0px;
                height: 0px;
                overflow: hidden;
                */
                position: fixed;
                left: 0px;
                top: 0px;
                width: 100vw;
                height: 100vh;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                background-color: rgba(0, 0, 0, 0.7);
            }

            .window {
                background-color: #222E35;
                border: solid 2px #33444E;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                width: 50vw;
                height: 50vh;
                padding: 0.5em;
            }

            .hidden-v textarea {
                background-color: #222E35;
                border: solid 2px #33444E;
                outline: none;
                color: #eee;
                
                align-self: stretch;
                flex-grow: 1;
            }
            .hidden {
                display: none;
            }
            .grow {
                flex-grow: 1;
            }
            .filled {
                background-color: #222E35;
            }
        </style>
    </head>
    <body>
        <div class="toolbar">
            <div class="text">Display:</div>
            <select id = "display-type">
                <option value="stretch" selected>Stretch</option>
                <option value="scroll">Scroll</option>
            </select>
            <div class="separator"></div>
            <div class="text">Send Keystokes:</div>
            <select id = "send-type">
                <option value="16,17,46" selected>Alt+Ctrl+Del</option>
                <option value="16,17,27">Ctrl+Shift+Esc</option>
                <option value="91,76">Win+L</option>
                <option value=":clip:">Clipboard Text</option>
            </select>
            <input type="button" id="send" value="Send">
			<div class="separator"></div>
            <div class="text">Traffic:</div>
			<div class="text" id="traffic"></div>
        </div>
        <div class="screen-area" id="screen-area" type="stretch">
            <!--<img class="screen" id="screen" src="/stream" oncontextmenu="return false;">-->
			<canvas id="screen" class="screen" oncontextmenu="return false;"></canvas>
        </div>
        <div id="paste-container" class="hidden">
            <div class="window">
                <textarea id="paste"></textarea>
                <div class="toolbar filled" style="width: 50vw"><div class="text grow">Enter text or paste from clipboard</div><input type="button" id="do-paste" value="Paste"></div>
            </div>
        </div>
        <script>
            var displayType = "stretch";
            var scrollSize = getScrollbarWidth() + 5;
            document.getElementById('screen').ondragstart = function() { return false; };
            document.getElementById('screen').onmousedown = function(e) {
                var coords = getCoords(e);
                sendSerial("MD:" + getButton(e) + "," + coords.x + "," + coords.y);
            }
            document.getElementById('screen').onmousemove = function(e) {
                var coords = getCoords(e);
                sendSerial("MM:" + coords.x + "," + coords.y);
                if (displayType == "scroll") {
                    var rect = e.target.getBoundingClientRect();
                    var parentRect = e.target.parentElement.getBoundingClientRect();
                    var hDiff = rect.height - parentRect.height + scrollSize;
                    var vDiff = rect.width - parentRect.width + scrollSize;
                    if (hDiff > 0) {
                        var y = e.clientY - parentRect.top;
                        e.target.parentElement.scrollTop = y / parentRect.height * hDiff;
                    }
                    if (vDiff > 0) {
                        var x = e.clientX - parentRect.left;
                        e.target.parentElement.scrollLeft = x / parentRect.width * vDiff;
                    }
                    //console.log(hDiff);
                }
            }
            document.getElementById('screen').onmouseup = function(e) {
                var coords = getCoords(e);
                sendSerial("MU:" + getButton(e) + "," + coords.x + "," + coords.y);
            }
            document.getElementById('screen').onwheel = function(e) {
                var value = e.deltaX == 0 ? 0 : (e.deltaX / Math.abs(e.deltaX));
                value = e.deltaY == 0 ? value : (e.deltaY / Math.abs(e.deltaY));
                sendSerial("MW:" + Math.floor(-value));
            }

            window.onkeydown = function(e) {
                if (e.target.getAttribute("id") == "paste") {
                    return;
                }
                var keyCode = convertKey(e);
                if (keyCode != 0) {
                    sendSerial("KD:" + keyCode);
                }
                console.log(e);
                return false;
            }
            window.onkeyup = function(e) {
                if (e.target.getAttribute("id") == "paste") {
                    return;
                }
                var keyCode = convertKey(e);
                if (keyCode != 0) {
                    sendSerial("KU:" + keyCode);
                }
                return false;
            }
            document.getElementById('display-type').onchange = function(e) {
                displayType = document.getElementById('display-type').value;
                document.getElementById('screen-area').setAttribute("type", displayType);
            }
            document.getElementById('display-type').onchange();

            document.getElementById('send').onclick = async function(e) {
                var value = document.getElementById('send-type').value;
                if (value == ":clip:") {
                    const text =  await getClipboardText();//navigator.clipboard.readText();
                    var shift = false;
                    var n = 0;
                    for (let c of text) {
                        var keyChar = convertChar(c);
                        if (keyChar != null) {
                            var cshift = "shift" in keyChar ? keyChar.shift : false;
                            if (cshift != shift) {
                                sendSerial((cshift ? "KD:" : "KU:") + HID_KEY_SHIFT_LEFT);
                                shift = cshift;
                            }
                            sendSerial("KD:" + keyChar.key);
                            sendSerial("KU:" + keyChar.key);
                            if (n % 3 == 0) {
                                await timeout(20);
                            }
                            n++;
                        }
                    }
                    if (shift) {
                        sendSerial("KU:" + HID_KEY_SHIFT_LEFT);
                    }
                    //alert(text);
                } else {
                    var keys = value.split(",");
                    for (let key of keys) {
                        sendSerial("KD:" + convertKey({ keyCode : key }));
                    }
                    for (let key of keys.reverse()) {
                        sendSerial("KU:" + convertKey({ keyCode : key }));
                    }
                }
            }

            function getButton(e) {
                switch (e.button) {
                    default:
                    case 0:
                        return 1;
                    case 1:
                        return 4;
                    case 2:
                        return 2;
                }
            }

            function getClipboardText() {
                return new Promise((resolve, reject) => {
                    var t = document.getElementById("paste");
                    var d = document.getElementById("paste-container");
                    var b = document.getElementById("do-paste");
                    d.onclick = function(e) {
                        if (e.target == e.currentTarget) {
                            //resolve(t.value);
                            d.setAttribute("class", "hidden");
                            reject();
                        }
                    }
                    b.onclick = function (e) {
                        d.setAttribute("class", "hidden");
                        resolve(t.value);
                    }
                    d.setAttribute("class", "hidden-v");
                    t.focus();
                });
                
            }

            function getCoords(e) {
                var rect = e.target.getBoundingClientRect();
                var x = e.clientX - rect.left;
                var y = e.clientY - rect.top;

                return { x: Math.floor(x / rect.width * 32768), y: Math.floor(y / rect.height * 32768) };
            }

            var inSend = false;
            var lines = [];

            function sendDone(success) {
                inSend = false;
                if (lines.length > 0) {
                    inSend = true;
                    var text = lines.join("&")
                    lines = [];
                    AJAXPost("/input", text, sendDone);
                }
            }

            function sendSerial(value) {
                lines.push(value);
                //console.log(value);
                if (!inSend) {
                    inSend = true;
                    var text = lines.join("&")
                    lines = [];
                    AJAXPost("/input", text, sendDone);
                }
            }

            function getScrollbarWidth() {
                
                const outer = document.createElement('div');
                outer.style.visibility = 'hidden';
                outer.style.overflow = 'scroll';
                outer.style.msOverflowStyle = 'scrollbar';
                document.body.appendChild(outer);

                const inner = document.createElement('div');
                outer.appendChild(inner);

                const scrollbarWidth = (outer.offsetWidth - inner.offsetWidth);

                outer.parentNode.removeChild(outer);

                return scrollbarWidth;
                
            }

			function streamRead(stream, count) {
				if (stream.pos + count <= stream.data.length && count > 0) {
					var data = [];
					for (var i = 0; i < count; i++) {
						data.push(stream.data[stream.pos]);
						stream.pos++;
					}
					return data;
				}
				return null;
			}

			function streamRead4(stream)
			{
				if (stream.pos + 4 <= stream.data.length) {
					var num = 0;
					for (var i = 3; i >= 0; i--) {
						num = (num << 8) | stream.data[stream.pos + i];
					}
					stream.pos += 4;;
					return num;
				}
				return null;
			}

			function streamIsEOF(stream) {
				return (stream.pos >= stream.data.length);
			}


            
            function timeout(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }

			function numberWithSpaces(x) {
				return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
			}
			var trafficBytes = 0;
			async function fetchStream(url) {
				while (true) {
					try {
						const response = await fetch(url);

						if (!response.ok) {
							throw new Error(`HTTP error! Status: ${response.status}`);
						}

						const reader = response.body.getReader();
						let done = false;
						while (!done) {
							const { value, done: doneReading } = await reader.read();
							done = doneReading;
							trafficBytes += value.length;
							//console.time("processFrame");
							await processFrame(value);
							//console.timeEnd("processFrame");
							document.getElementById("traffic").innerText = numberWithSpaces(trafficBytes) + " bytes";
						}
					} catch {}
				}
			}

			function loadImage(src){
				return new Promise((resolve, reject) => {
					let img = new Image();
					img.onload = () => resolve(img);
					img.onerror = function(e) { 
						reject();
					};
					img.src = src;
				});
			}

			var canvas = document.getElementById("screen");
			var ctx = canvas.getContext("2d");
			var stream = { data: [], pos: 0 };
			async function processFrame(frame) {
				
				for (let b of frame) {
					stream.data.push(b);
				}

				/*
				var s = '';
				for (let b of frame) {
					s = s + "[" + b + "]";
				}
				console.log("Received frame: " + s.length, s);
				*/

				var paints = [];

				var offset = 0;
				//*
				while (!streamIsEOF(stream)) {
					var packetType = streamRead4(stream);
					if (packetType == null) {
						break;
					}

					if (packetType == 255) {
						//console.log("Received empty");
						offset = stream.pos;
					} else if (packetType == 0) {
						var width = streamRead4(stream);
						var height = streamRead4(stream);
						var length = streamRead4(stream);
						var data = streamRead(stream, length);
						if (width != null & height != null && length != null && data != null) {
							offset = stream.pos;
							//console.log("Received Full " + width + ", " + height + ", " + length);
							var canvas = document.getElementById("screen");
							canvas.setAttribute("width", width + "px");
							canvas.setAttribute("height", height + "px");
							ctx = canvas.getContext("2d");
							const blob = new Blob([Uint8Array.from(data)], { type: 'image/jpeg' });
							const url = URL.createObjectURL(blob);
							var img = await loadImage(url);
							ctx.drawImage(img, 0, 0);
							URL.revokeObjectURL(url);
						}
						break;
					} else if (packetType == 1) {
						var x = streamRead4(stream);
						var y = streamRead4(stream);
						var width = streamRead4(stream);
						var height = streamRead4(stream);
						var length = streamRead4(stream);
						var data = streamRead(stream, length);
						if (x != null && y != null && width != null & height != null && length != null && data != null) {
							//console.log("Received Part " + x + ", " + y + ", " + width + ", " + height + ", " + length);
							offset = stream.pos;
							//var canvas = document.getElementById("screen");
							//ctx = canvas.getContext("2d");
							const blob = new Blob([Uint8Array.from(data)], { type: 'image/jpeg' });
							const url = URL.createObjectURL(blob);
							var img = await loadImage(url);
							//*
							paints.push({
								img: img,
								x: x,
								y: y,
								url: url,
							});//*/
							//ctx.drawImage(img, x, y);
							//URL.revokeObjectURL(url);
						}
					}
				}

				if (paints.length > 0){
					
					for(let paint of paints) {
						ctx.drawImage(paint.img, paint.x, paint.y);
						URL.revokeObjectURL(paint.url);
					}
				}

				if (offset > 0) {
					stream.data.splice(0, offset);
				}
				stream.pos = 0;
				//*/
				/*
				
				*/
			}

			fetchStream('/changes');
			/*
			var xhr = new XMLHttpRequest();
			xhr.onreadystatechange = function() {
				if (xhr.readyState == XMLHttpRequest.LOADING) {
					// This state can be triggered multiple times between 0 and 4
					if (xhr.status == 200) {
						processNewData(xhr.response);
					}
				} else if (xhr.readyState == XMLHttpRequest.DONE) {
					// Handle completion if needed, although in this scenario, ideally,
					// we want the connection to stay open indefinitely
				}
			};

			xhr.open('GET', '/changes');
			xhr.send();

			function processNewData(response) {
				// Assume data chunks end with a specific delimiter like '\n' or a boundary string
				// You can parse the responseText to extract new frames
				console.log("New frame received:", response);
			}
			*/





















            var HID_KEY_NONE = 0x00;
            var HID_KEY_A = 0x04;
            var HID_KEY_B = 0x05;
            var HID_KEY_C = 0x06;
            var HID_KEY_D = 0x07;
            var HID_KEY_E = 0x08;
            var HID_KEY_F = 0x09;
            var HID_KEY_G = 0x0A;
            var HID_KEY_H = 0x0B;
            var HID_KEY_I = 0x0C;
            var HID_KEY_J = 0x0D;
            var HID_KEY_K = 0x0E;
            var HID_KEY_L = 0x0F;
            var HID_KEY_M = 0x10;
            var HID_KEY_N = 0x11;
            var HID_KEY_O = 0x12;
            var HID_KEY_P = 0x13;
            var HID_KEY_Q = 0x14;
            var HID_KEY_R = 0x15;
            var HID_KEY_S = 0x16;
            var HID_KEY_T = 0x17;
            var HID_KEY_U = 0x18;
            var HID_KEY_V = 0x19;
            var HID_KEY_W = 0x1A;
            var HID_KEY_X = 0x1B;
            var HID_KEY_Y = 0x1C;
            var HID_KEY_Z = 0x1D;
            var HID_KEY_1 = 0x1E;
            var HID_KEY_2 = 0x1F;
            var HID_KEY_3 = 0x20;
            var HID_KEY_4 = 0x21;
            var HID_KEY_5 = 0x22;
            var HID_KEY_6 = 0x23;
            var HID_KEY_7 = 0x24;
            var HID_KEY_8 = 0x25;
            var HID_KEY_9 = 0x26;
            var HID_KEY_0 = 0x27;
            var HID_KEY_ENTER = 0x28;
            var HID_KEY_ESCAPE = 0x29;
            var HID_KEY_BACKSPACE = 0x2A;
            var HID_KEY_TAB = 0x2B;
            var HID_KEY_SPACE = 0x2C;
            var HID_KEY_MINUS = 0x2D;
            var HID_KEY_EQUAL = 0x2E;
            var HID_KEY_BRACKET_LEFT = 0x2F;
            var HID_KEY_BRACKET_RIGHT = 0x30;
            var HID_KEY_BACKSLASH = 0x31;
            var HID_KEY_EUROPE_1 = 0x32;
            var HID_KEY_SEMICOLON = 0x33;
            var HID_KEY_APOSTROPHE = 0x34;
            var HID_KEY_GRAVE = 0x35;
            var HID_KEY_COMMA = 0x36;
            var HID_KEY_PERIOD = 0x37;
            var HID_KEY_SLASH = 0x38;
            var HID_KEY_CAPS_LOCK = 0x39;
            var HID_KEY_F1 = 0x3A;
            var HID_KEY_F2 = 0x3B;
            var HID_KEY_F3 = 0x3C;
            var HID_KEY_F4 = 0x3D;
            var HID_KEY_F5 = 0x3E;
            var HID_KEY_F6 = 0x3F;
            var HID_KEY_F7 = 0x40;
            var HID_KEY_F8 = 0x41;
            var HID_KEY_F9 = 0x42;
            var HID_KEY_F10 = 0x43;
            var HID_KEY_F11 = 0x44;
            var HID_KEY_F12 = 0x45;
            var HID_KEY_PRINT_SCREEN = 0x46;
            var HID_KEY_SCROLL_LOCK = 0x47;
            var HID_KEY_PAUSE = 0x48;
            var HID_KEY_INSERT = 0x49;
            var HID_KEY_HOME = 0x4A;
            var HID_KEY_PAGE_UP = 0x4B;
            var HID_KEY_DELETE = 0x4C;
            var HID_KEY_END = 0x4D;
            var HID_KEY_PAGE_DOWN = 0x4E;
            var HID_KEY_ARROW_RIGHT = 0x4F;
            var HID_KEY_ARROW_LEFT = 0x50;
            var HID_KEY_ARROW_DOWN = 0x51;
            var HID_KEY_ARROW_UP = 0x52;
            var HID_KEY_NUM_LOCK = 0x53;
            var HID_KEY_KEYPAD_DIVIDE = 0x54;
            var HID_KEY_KEYPAD_MULTIPLY = 0x55;
            var HID_KEY_KEYPAD_SUBTRACT = 0x56;
            var HID_KEY_KEYPAD_ADD = 0x57;
            var HID_KEY_KEYPAD_ENTER = 0x58;
            var HID_KEY_KEYPAD_1 = 0x59;
            var HID_KEY_KEYPAD_2 = 0x5A;
            var HID_KEY_KEYPAD_3 = 0x5B;
            var HID_KEY_KEYPAD_4 = 0x5C;
            var HID_KEY_KEYPAD_5 = 0x5D;
            var HID_KEY_KEYPAD_6 = 0x5E;
            var HID_KEY_KEYPAD_7 = 0x5F;
            var HID_KEY_KEYPAD_8 = 0x60;
            var HID_KEY_KEYPAD_9 = 0x61;
            var HID_KEY_KEYPAD_0 = 0x62;
            var HID_KEY_KEYPAD_DECIMAL = 0x63;
            var HID_KEY_EUROPE_2 = 0x64;
            var HID_KEY_APPLICATION = 0x65;
            var HID_KEY_POWER = 0x66;
            var HID_KEY_KEYPAD_EQUAL = 0x67;
            var HID_KEY_F13 = 0x68;
            var HID_KEY_F14 = 0x69;
            var HID_KEY_F15 = 0x6A;
            var HID_KEY_F16 = 0x6B;
            var HID_KEY_F17 = 0x6C;
            var HID_KEY_F18 = 0x6D;
            var HID_KEY_F19 = 0x6E;
            var HID_KEY_F20 = 0x6F;
            var HID_KEY_F21 = 0x70;
            var HID_KEY_F22 = 0x71;
            var HID_KEY_F23 = 0x72;
            var HID_KEY_F24 = 0x73;
            var HID_KEY_EXECUTE = 0x74;
            var HID_KEY_HELP = 0x75;
            var HID_KEY_MENU = 0x76;
            var HID_KEY_SELECT = 0x77;
            var HID_KEY_STOP = 0x78;
            var HID_KEY_AGAIN = 0x79;
            var HID_KEY_UNDO = 0x7A;
            var HID_KEY_CUT = 0x7B;
            var HID_KEY_COPY = 0x7C;
            var HID_KEY_PASTE = 0x7D;
            var HID_KEY_FIND = 0x7E;
            var HID_KEY_MUTE = 0x7F;
            var HID_KEY_VOLUME_UP = 0x80;
            var HID_KEY_VOLUME_DOWN = 0x81;
            var HID_KEY_LOCKING_CAPS_LOCK = 0x82;
            var HID_KEY_LOCKING_NUM_LOCK = 0x83;
            var HID_KEY_LOCKING_SCROLL_LOCK = 0x84;
            var HID_KEY_KEYPAD_COMMA = 0x85;
            var HID_KEY_KEYPAD_EQUAL_SIGN = 0x86;
            var HID_KEY_KANJI1 = 0x87;
            var HID_KEY_KANJI2 = 0x88;
            var HID_KEY_KANJI3 = 0x89;
            var HID_KEY_KANJI4 = 0x8A;
            var HID_KEY_KANJI5 = 0x8B;
            var HID_KEY_KANJI6 = 0x8C;
            var HID_KEY_KANJI7 = 0x8D;
            var HID_KEY_KANJI8 = 0x8E;
            var HID_KEY_KANJI9 = 0x8F;
            var HID_KEY_LANG1 = 0x90;
            var HID_KEY_LANG2 = 0x91;
            var HID_KEY_LANG3 = 0x92;
            var HID_KEY_LANG4 = 0x93;
            var HID_KEY_LANG5 = 0x94;
            var HID_KEY_LANG6 = 0x95;
            var HID_KEY_LANG7 = 0x96;
            var HID_KEY_LANG8 = 0x97;
            var HID_KEY_LANG9 = 0x98;
            var HID_KEY_ALTERNATE_ERASE = 0x99;
            var HID_KEY_SYSREQ_ATTENTION = 0x9A;
            var HID_KEY_CANCEL = 0x9B;
            var HID_KEY_CLEAR = 0x9C;
            var HID_KEY_PRIOR = 0x9D;
            var HID_KEY_RETURN = 0x9E;
            var HID_KEY_SEPARATOR = 0x9F;
            var HID_KEY_OUT = 0xA0;
            var HID_KEY_OPER = 0xA1;
            var HID_KEY_CLEAR_AGAIN = 0xA2;
            var HID_KEY_CRSEL_PROPS = 0xA3;
            var HID_KEY_EXSEL = 0xA4;
            var HID_KEY_KEYPAD_00 = 0xB0;
            var HID_KEY_KEYPAD_000 = 0xB1;
            var HID_KEY_THOUSANDS_SEPARATOR = 0xB2;
            var HID_KEY_DECIMAL_SEPARATOR = 0xB3;
            var HID_KEY_CURRENCY_UNIT = 0xB4;
            var HID_KEY_CURRENCY_SUBUNIT = 0xB5;
            var HID_KEY_KEYPAD_LEFT_PARENTHESIS = 0xB6;
            var HID_KEY_KEYPAD_RIGHT_PARENTHESIS = 0xB7;
            var HID_KEY_KEYPAD_LEFT_BRACE = 0xB8;
            var HID_KEY_KEYPAD_RIGHT_BRACE = 0xB9;
            var HID_KEY_KEYPAD_TAB = 0xBA;
            var HID_KEY_KEYPAD_BACKSPACE = 0xBB;
            var HID_KEY_KEYPAD_A = 0xBC;
            var HID_KEY_KEYPAD_B = 0xBD;
            var HID_KEY_KEYPAD_C = 0xBE;
            var HID_KEY_KEYPAD_D = 0xBF;
            var HID_KEY_KEYPAD_E = 0xC0;
            var HID_KEY_KEYPAD_F = 0xC1;
            var HID_KEY_KEYPAD_XOR = 0xC2;
            var HID_KEY_KEYPAD_CARET = 0xC3;
            var HID_KEY_KEYPAD_PERCENT = 0xC4;
            var HID_KEY_KEYPAD_LESS_THAN = 0xC5;
            var HID_KEY_KEYPAD_GREATER_THAN = 0xC6;
            var HID_KEY_KEYPAD_AMPERSAND = 0xC7;
            var HID_KEY_KEYPAD_DOUBLE_AMPERSAND = 0xC8;
            var HID_KEY_KEYPAD_VERTICAL_BAR = 0xC9;
            var HID_KEY_KEYPAD_DOUBLE_VERTICAL_BAR = 0xCA;
            var HID_KEY_KEYPAD_COLON = 0xCB;
            var HID_KEY_KEYPAD_HASH = 0xCC;
            var HID_KEY_KEYPAD_SPACE = 0xCD;
            var HID_KEY_KEYPAD_AT = 0xCE;
            var HID_KEY_KEYPAD_EXCLAMATION = 0xCF;
            var HID_KEY_KEYPAD_MEMORY_STORE = 0xD0;
            var HID_KEY_KEYPAD_MEMORY_RECALL = 0xD1;
            var HID_KEY_KEYPAD_MEMORY_CLEAR = 0xD2;
            var HID_KEY_KEYPAD_MEMORY_ADD = 0xD3;
            var HID_KEY_KEYPAD_MEMORY_SUBTRACT = 0xD4;
            var HID_KEY_KEYPAD_MEMORY_MULTIPLY = 0xD5;
            var HID_KEY_KEYPAD_MEMORY_DIVIDE = 0xD6;
            var HID_KEY_KEYPAD_PLUS_MINUS = 0xD7;
            var HID_KEY_KEYPAD_CLEAR = 0xD8;
            var HID_KEY_KEYPAD_CLEAR_ENTRY = 0xD9;
            var HID_KEY_KEYPAD_BINARY = 0xDA;
            var HID_KEY_KEYPAD_OCTAL = 0xDB;
            var HID_KEY_KEYPAD_DECIMAL_2 = 0xDC;
            var HID_KEY_KEYPAD_HEXADECIMAL = 0xDD;
            var HID_KEY_CONTROL_LEFT = 0xE0;
            var HID_KEY_SHIFT_LEFT = 0xE1;
            var HID_KEY_ALT_LEFT = 0xE2;
            var HID_KEY_GUI_LEFT = 0xE3;
            var HID_KEY_CONTROL_RIGHT = 0xE4;
            var HID_KEY_SHIFT_RIGHT = 0xE5;
            var HID_KEY_ALT_RIGHT = 0xE6;
            var HID_KEY_GUI_RIGHT = 0xE7;

            var keyMap = {};
            var charMap = {};

            function createKeyMap() {
                for (var i = 65; i <= 90; i++) {
                    keyMap[i] = HID_KEY_A + (i - 65);
                }
                keyMap[48] = HID_KEY_0;
                for (var i = 49; i <= 57; i++) {
                    keyMap[i] = HID_KEY_1 + (i - 49);
                }
                for (var i = 112; i <= 123; i++) {
                    keyMap[i] = HID_KEY_F1 + (i - 112);
                }
                for (var i = 96; i <= 105; i++) {
                    keyMap[i] = HID_KEY_KEYPAD_0 + (i - 96);
                }
                keyMap[192] = HID_KEY_GRAVE;
                keyMap[16] = HID_KEY_SHIFT_LEFT;
                keyMap[17] = HID_KEY_CONTROL_LEFT;
                keyMap[18] = HID_KEY_ALT_LEFT;
                keyMap[32] = HID_KEY_SPACE;
                keyMap[173] = HID_KEY_MINUS;
                keyMap[61] = HID_KEY_EQUAL;
                keyMap[220] = HID_KEY_BACKSLASH;
                keyMap[191] = HID_KEY_SLASH;
                keyMap[219] = HID_KEY_BRACKET_LEFT;
                keyMap[221] = HID_KEY_BRACKET_RIGHT;
                keyMap[222] = HID_KEY_APOSTROPHE;
                keyMap[59] = HID_KEY_SEMICOLON;
                keyMap[188] = HID_KEY_COMMA;
                keyMap[190] = HID_KEY_PERIOD;

                keyMap[107] = HID_KEY_KEYPAD_ADD;
                keyMap[109] = HID_KEY_KEYPAD_SUBTRACT;
                keyMap[106] = HID_KEY_KEYPAD_MULTIPLY;
                keyMap[111] = HID_KEY_KEYPAD_DIVIDE;
                keyMap[110] = HID_KEY_KEYPAD_DECIMAL;

                keyMap[144] = HID_KEY_NUM_LOCK;
                
                keyMap[13] = HID_KEY_ENTER;
                keyMap[27] = HID_KEY_ESCAPE;
                keyMap[9] = HID_KEY_TAB;
                keyMap[8] = HID_KEY_BACKSPACE;

                keyMap[45] = HID_KEY_INSERT;
                keyMap[46] = HID_KEY_DELETE;
                keyMap[36] = HID_KEY_HOME;
                keyMap[35] = HID_KEY_END;
                keyMap[33] = HID_KEY_PAGE_UP;
                keyMap[34] = HID_KEY_PAGE_DOWN;

                keyMap[91] = HID_KEY_GUI_LEFT;
                keyMap[30] = HID_KEY_CAPS_LOCK;

                keyMap[44] = HID_KEY_PRINT_SCREEN;
                keyMap[145] = HID_KEY_SCROLL_LOCK;
                keyMap[19] = HID_KEY_PAUSE;

                keyMap[38] = HID_KEY_ARROW_UP;
                keyMap[40] = HID_KEY_ARROW_DOWN;
                keyMap[37] = HID_KEY_ARROW_LEFT;
                keyMap[39] = HID_KEY_ARROW_RIGHT;

            }
            function createCharMap() {
                for (var i = 'a'.charCodeAt(0); i <= 'z'.charCodeAt(0); i++)
                {
                    charMap[String.fromCharCode(i)] = { key: HID_KEY_A + (i - 'a'.charCodeAt(0))};
                }
                for (var i = 'A'.charCodeAt(0); i <= 'Z'.charCodeAt(0); i++)
                {
                    charMap[String.fromCharCode(i)] = { key: HID_KEY_A + (i - 'A'.charCodeAt(0)), shift: true};
                }

                charMap['0'] = { key: HID_KEY_0};
                for (var i = '1'.charCodeAt(0); i <= '9'.charCodeAt(0); i++)
                {
                    charMap[String.fromCharCode(i)] = { key: HID_KEY_1 + (i - '1'.charCodeAt(0))};
                }

                charMap[')'] = { key: HID_KEY_0, shift: true};
                charMap['('] = { key: HID_KEY_9, shift: true};
                charMap['*'] = { key: HID_KEY_8, shift: true};
                charMap['&'] = { key: HID_KEY_7, shift: true};
                charMap['^'] = { key: HID_KEY_6, shift: true};
                charMap['%'] = { key: HID_KEY_5, shift: true};
                charMap['$'] = { key: HID_KEY_4, shift: true};
                charMap['#'] = { key: HID_KEY_3, shift: true};
                charMap['@'] = { key: HID_KEY_2, shift: true};
                charMap['!'] = { key: HID_KEY_1, shift: true};

                charMap['`'] = { key: HID_KEY_GRAVE};
                charMap['~'] = { key: HID_KEY_GRAVE, shift: true};

                charMap['\n'] = { key: HID_KEY_ENTER};
                charMap[' '] = { key: HID_KEY_SPACE, shift: true};
                charMap['\t'] = { key: HID_KEY_TAB};
                charMap[';'] = { key: HID_KEY_SEMICOLON};
                charMap[':'] = { key: HID_KEY_SEMICOLON, shift: true};
                charMap[','] = { key: HID_KEY_COMMA};
                charMap['<'] = { key: HID_KEY_COMMA, shift: true};
                charMap['.'] = { key: HID_KEY_PERIOD};
                charMap['>'] = { key: HID_KEY_PERIOD, shift: true};
                charMap['/'] = { key: HID_KEY_SLASH};
                charMap['?'] = { key: HID_KEY_SLASH, shift: true};

                charMap['-'] = { key: HID_KEY_MINUS};
                charMap['_'] = { key: HID_KEY_MINUS, shift: true};
                charMap['='] = { key: HID_KEY_EQUAL};
                charMap['+'] = { key: HID_KEY_EQUAL, shift: true};
                charMap['['] = { key: HID_KEY_BRACKET_LEFT};
                charMap['{'] = { key: HID_KEY_BRACKET_LEFT, shift: true};
                charMap[']'] = { key: HID_KEY_BRACKET_RIGHT};
                charMap['}'] = { key: HID_KEY_BRACKET_RIGHT, shift: true};
                charMap['\\'] = { key: HID_KEY_BACKSLASH};
                charMap['|'] = { key: HID_KEY_BACKSLASH, shift: true};
                charMap['\''] = { key: HID_KEY_APOSTROPHE};
                charMap['\"'] = { key: HID_KEY_APOSTROPHE, shift: true};


                //Russian

                var RussianL = "йцукенгшщзхъфывапролджэячсмитьбюё";
                var RussianU = "ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮЁ№";
                var EnglishL = "qwertyuiop[]asdfghjkl;'zxcvbnm,.`";
                var EnglishU = "QWERTYUIOP{}ASDFGHJKL:\"ZXCVBNM<>~#";

                var N = 0;
                for (let c of RussianL) {
                    if (EnglishL[N] in charMap)
                    {
                        var value = charMap[EnglishL[N]];
                        charMap[c] = { key: value.key, shift: ("shift" in value ? value.shift : false), lang: true};
                    }

                    N++;
                }

                N = 0;
                for (let c of RussianU) {
                    if (EnglishU[N] in charMap)
                    {
                        var value = charMap[EnglishU[N]];
                        charMap[c] = { key: value.key, shift: ("shift" in value ? value.shift : false), lang: true};
                    }

                    N++;
                }
            }

            createKeyMap();
            createCharMap();

            function convertChar(c) {
                if (c in charMap) {
                    return charMap[c];
                }
                return null;
            }

            function convertKey(e) {
                if (e.keyCode in keyMap) {
                    return keyMap[e.keyCode];
                }
                return HID_KEY_NONE;
            }
            


            var ajaxUploadProgess = null;
            function clsXMLHTTP_A() {
                this.xmlhttp = null;
            };

            clsXMLHTTP_A.prototype.SendRequestPost = function (url, post_text, callbackFunction) {
                this.xmlhttp = null;
                if (window.XMLHttpRequest) {
                    this.xmlhttp = new XMLHttpRequest();
                }
                else if (window.ActiveXObject) {
                    this.xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                }
                if (this.xmlhttp != null) {
                    this.xmlhttp.tag = callbackFunction;
                    this.xmlhttp.onreadystatechange = Function(" callback_A(this) ");
                    this.xmlhttp.open("POST", url, true);
                    /*
                    var post_text = "";
                    for (var key in param_array) {
                        if (post_text.length > 0) {
                            post_text += '&';
                        }
                        post_text += encodeURIComponent(key) + '=' + encodeURIComponent(param_array[key]);
                    }*/
                    //alert(post_text);
                    this.xmlhttp.setRequestHeader('Content-Type', 'text/plain');
                    this.xmlhttp.upload.onprogress = ajaxUploadProgess;
                    this.xmlhttp.send(post_text);

                }
            };

            function callback_A(req) {
                if (req.readyState == 4) {
                    var callbackFunction = req.tag;
                    if (req.status == 200) {
                        callbackFunction(true);
                    }
                    else {
                        callbackFunction(false);
                    }
                }
            }

            function AJAXPost(url, post_text, callbackFunction) {
                HTTP_A.SendRequestPost(url, post_text, callbackFunction);
            }
            
            var HTTP_A = new clsXMLHTTP_A();

        </script>
    </body>
</html>